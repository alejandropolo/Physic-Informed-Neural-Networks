equation:
  equation: '2 * u * u_t - ( k_1_mean_mod * u_t - k_2_mean * u_t * log(u) + k_3_mean * 2 * (K_Q/1e13) * t * 100000)'
  params_to_optimize: []
  func_to_optimize: False
  hidden_layers: [300, 100] # for func_to_optimize = True
  data_from_csv: '../Data/simulation_table_t_square(in).csv' # path to csv file
  constant_values: {
    'K_H': 2,
    'K_Q': -8.033, # -6.94 for linear, -8.033 for square
    'K_th': 0.5,
  }
  f: ''
  initial_conditions: {
    'u_0': 2,
  }


data_load:
  t_0: 0
  t_fin: 1
  n_points: 6
  noise: 0.0

model_architecture:
  layers: [10]
  activations: "sigmoid"
  
training:
  lr: 0.1  ## Learning rate
  lambda_pin: 1e9  ## Lambda for the physics loss
  lambda_ic: 1  ## Lambda for the physics loss
  lambda_bc: 1  ## Lambda for the physics loss
  n_epochs: 1000  ## Number of epochs
  optimizer: "lbfgs"  ## Optimizer