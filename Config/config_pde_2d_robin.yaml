equation:
  equation: 'u_t - alpha * (u_yy + u_xx)'
  params_to_optimize: []
  func_to_optimize: False
  hidden_layers: [300, 100] # for func_to_optimize = True
  data_from_csv: '' # path to csv file
  constant_values: {
    'alpha': 0.05,
  }
  f: 'torch.sin(torch.pi * x) * torch.sin(torch.pi * y) * torch.exp(-2 * alpha * torch.pi ** 2 * t)'
  initial_conditions: [
    'u_0_x_y = torch.sin(torch.pi * x) * torch.sin(torch.pi * y)',
    'u_t_0_y + udx_t_0_y = - torch.sin(torch.pi * y) * torch.exp(-2 * alpha * torch.pi ** 2 * t) * torch.pi',
    'u_t_L_y + udx_t_L_y = - torch.sin(torch.pi * y) * torch.exp(-2 * alpha * torch.pi ** 2 * t) * torch.pi',
    'u_t_x_0 + udy_t_x_0 = - torch.sin(torch.pi * x) * torch.exp(-2 * alpha * torch.pi ** 2 * t) * torch.pi',
    'u_t_x_L + udy_t_x_L = - torch.sin(torch.pi * x) * torch.exp(-2 * alpha * torch.pi ** 2 * t) * torch.pi',
  ]


data_load:
  L: 1
  T: 1
  plate_length: 25
  max_iter_time: 100
  alpha: 0.05

model_architecture:
  layers: [10]
  activations: "sigmoid"
  
training:
  lr: 0.01  ## Learning rate
  lambda_pin: 1  ## Lambda for the physics loss
  lambda_ic: 1  ## Lambda for the physics loss
  lambda_bc: 1  ## Lambda for the physics loss
  n_epochs: 100  ## Number of epochs
  optimizer: "lbfgs"  ## Optimizer